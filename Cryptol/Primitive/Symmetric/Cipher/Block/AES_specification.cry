/*
   @copyright Galois, Inc.
   @author Marcella Hastings <marcella@galois.com>
   www.cryptol.net

   This provides the basic AES block cipher, abstracted over the key length.

   It operates over 128-bit blocks. To use AES with any practical application,
   use it with a mode of operation, like CTR or GCM-SIV.

   References
   [FIPS-197u1]: Morris J. Dworkin, Elaine B. Barker, James R. Nechvatal,
   James Foti, Lawrence E. Bassham, E. Roback, and James F. Dray Jr.
   Advanced Encryption Standard (AES). Federal Inf. Process. Stds. (NIST FIPS)
   197, update 1. May 2023.
*/

module Primitive::Symmetric::Cipher::Block::AES_specification where

import Primitive::Symmetric::Cipher::Block::AES::Cipher as AES where
   // The AES implementation uses the `Mode` type to compute other parameters.
   // The mode corresponds directly to the key size:
   // Mode 0 = 128 bits; Mode 1 = 192 bits; Mode 2 = 256 bits
   type Mode = (KeySize / 64) - 2

import Primitive::Symmetric::Cipher::Block::AES::ExpandKey as ExpandKey where
   type Nk = AES::Nk
   type Nr = AES::Nr

parameter
   // This constraint enforces the standard key sizes of 128, 192, and
   // 256-bits. [FIPS-197u1] Sections 1, 5, and 6.1.
   type KeySize' : #
   type constraint (fin KeySize', KeySize' % 64 == 0, KeySize' / 64 >= 2,
      KeySize' / 64 <= 4)

// Make `KeySize` and `BlockSize` accessible outside the module.
// This also lets us use AES as an instantiation of `CipherInterface`
type KeySize = KeySize'
type BlockSize = 128

encrypt : [KeySize] -> [BlockSize] -> [BlockSize]
encrypt k = encryptWithSchedule (keyExpansion k)

decrypt : [KeySize] -> [BlockSize] -> [BlockSize]
decrypt k = decryptWithSchedule (keyExpansion k)

/**
 * This property must be true for each instantiation.
 * With high probability, it will be extremely slow to prove.
 *
 * ```repl
 * :check aesIsCorrect
 * ```
 */
property aesIsCorrect k pt = decrypt k (encrypt k pt) == pt

// The following methods should not be used in general. They are public
// to support a confusing endianness issue in the implementation of
// AES-GCM-SIV.
type ExpandedKey = AES::KeySchedule

keyExpansion: [KeySize] -> ExpandedKey
keyExpansion = ExpandKey::keyExpansion

encryptWithSchedule :  ExpandedKey -> [BlockSize] -> [BlockSize]
encryptWithSchedule = AES::cipher

private
   decryptWithSchedule : ExpandedKey -> [BlockSize] -> [BlockSize]
   decryptWithSchedule = AES::invCipher
