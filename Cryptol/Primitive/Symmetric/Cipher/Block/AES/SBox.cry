// The substitution table (S-box) for AES.
//
// @copyright Galois Inc.
// @author Nichole Schimanski <nls@galois.com>
// @editor Brian Huffman
// @author Marcella Hastings <marcella@galois.com>
// www.cryptol.net
module Primitive::Symmetric::Cipher::Block::AES::SBox where

import Common::GF28 as GF28
private type GF28 = GF28::GF28

type SBox = [256] GF28

/**
 * The substitution table as given in Table 4. The table is pulled out here
 * for efficiency, letting us compute the table once per access in AES.
 */
sboxTable : SBox
private sboxTable = [ transform (GF28::inverse b) | b <- [0 .. 255] ] where
    // Equation 5.3.
    transform b = GF28::add [b, (b >>> 4), (b >>> 5), (b >>> 6), (b >>> 7), c]
    // The constant byte {01100011}.
    c = 0x63

/**
 * SBox: A non-linear substitution table for AES.
 * [FIPS-197u1] Section 5.1.1.
 *
 * `GF28::inverse b` corresponds to Equation 5.2.
 */
sbox : GF28 -> GF28
sbox b = sboxTable @ b

/**
 * Sbox example from p. 14
 * ```repl
 *  :prove sBox53
 * ```
 */
property sBox53 = sbox 0x53 == 0xed

/**
 * The substitution table as given in Table 6. The table is pulled out here
 * for efficiency, letting us compute the table once per access in AES.
 */
sboxInvTable : SBox
private sboxInvTable = [ GF28::inverse (transformInv b) | b <- [0 .. 255] ] where
    transformInv b = GF28::add [(b >>> 2), (b >>> 5), (b >>> 7), d]
    d = 0x05

/**
 * Inverted substitution table for AES.
 * [FIPS-197u1] Section 5.3.2.
 */
sboxInv : GF28 -> GF28
sboxInv b = sboxInvTable @ b

/**
 * S-box inversion must be correctly defined.
 * ```repl
 * :prove sBoxInverts
 * ```
 */
property sBoxInverts b = sboxInv (sbox b) == b