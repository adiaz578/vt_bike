// Cryptol AES CFB test vectors
// @copyright Galois Inc. 2010-2018
// @author Ajay Kumar Eeralla
// www.cryptol.net
// You can freely use this source code for educational purposes.

module Primitive::Symmetric::Cipher::Block::Modes::AES128_CFB where
import Primitive::Symmetric::Cipher::Block::Modes::CFB
import Primitive::Symmetric::Cipher::Block::AES128 as AES128

AES128_CFB_encrypt: {n} (fin n) => [AES128::KeySize] -> iv -> [n]block -> [n]block
AES128_CFB_encrypt = cfbEnc AES128::encrypt

AES128_CFB_decrypt: {n} (fin n) => [AES128::KeySize] -> iv -> [n]block -> [n]block
AES128_CFB_decrypt = cfbDec AES128::decrypt

// Test vectors from https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38a.pdf
/**
 * CFB mode with 1 block works.
 * ```repl
 * :prove testEncCfbPassB1
 * ```
 */
property testEncCfbPassB1 = and [ (AES128_CFB_encrypt k iv ps) == cs
                                | k <- testKey | iv <- testIv | ps <- testPt | cs <- testCt ]
    where
        testKey = [0x2b7e151628aed2a6abf7158809cf4f3c]
        testIv = [0x000102030405060708090a0b0c0d0e0f]
        testPt = [[0x6bc1bee22e409f96e93d7e117393172a]]
        testCt = [[0x3b3fd92eb72dad20333449f8e83cfb4a]]


/**
 * CFB mode with 2 block works.
 * ```repl
 * :prove testEncCfbPassB2
 * ```
 */
property testEncCfbPassB2 = and [ (AES128_CFB_encrypt k iv ps) == cs
                                | k <- testKey2 | iv <- testIv2 | ps <- testPt2 | cs <- testCt2 ]
    where
        testKey2 = [0x2b7e151628aed2a6abf7158809cf4f3c]
        testIv2 = [0x000102030405060708090a0b0c0d0e0f]
        testPt2 = [[0x6bc1bee22e409f96e93d7e117393172a, 0xae2d8a571e03ac9c9eb76fac45af8e51, 0x30c81c46a35ce411e5fbc1191a0a52ef, 0xf69f2445df4f9b17ad2b417be66c3710]]
        testCt2 = [[0x3b3fd92eb72dad20333449f8e83cfb4a, 0xc8a64537a0b3a93fcde3cdad9f1ce58b, 0x26751f67a3cbb140b1808cf187a4f4df, 0xc04b05357c5d1c0eeac4c66f9ff7f2e6]]


