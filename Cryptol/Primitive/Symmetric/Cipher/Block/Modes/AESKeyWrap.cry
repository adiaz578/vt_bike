// Cryptol AES Key Wrap Implementation
//
// @copyright Galois Inc.
// @author Brett Boston
// @author Ryan Scott <rscott@galois.com>
// @author Marcella Hastings <marcella@galois.com>
// www.cryptol.net
//
// This is a close implementation of RFC 3394:
// https://tools.ietf.org/html/rfc3394
// RFC 3394 provides two equivalent descriptions of AES Key Wrap, one using
// shifting and the other using indexing.  This specification closely matches
// the index-based algorithm description as that description is more similar
// to the BoringSSL AES Key Wrap implementation.
//

module Primitive::Symmetric::Cipher::Block::Modes::AESKeyWrap where

parameter
  // This constraint enforces the standard key sizes of 128, 192, and
  // 256 bits.
  type AESKeySize' : #
  type constraint (fin AESKeySize', AESKeySize' % 64 == 0, AESKeySize' / 64 >= 2, AESKeySize' / 64 <= 4)

import Primitive::Symmetric::Cipher::Block::AES_specification as AES where
  type KeySize' = AESKeySize'

// Make the key size parameter available outside the module
type AESKeySize = AESKeySize'

// Default intial value (Section 2.2.3)
DefaultIV : [8][8]
DefaultIV = [0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6]

// Wrap `plaintext` using `key` as the key encryption key.  `iv` is the initial
// value to use.  This function implements the algorithm from Section 2.2.1
// using the index-based definition.
aesWrapKey : {n} (fin n, n >= 16, n % 8 == 0, width (n / 8) <= 64) =>
             [AESKeySize] -> [8][8] -> [n][8] -> [n+8][8]
aesWrapKey key iv plaintext = split (join C)
  where
    // Step 1: Initialize variables
    A = join iv
    R = split`{parts=n/8, each=64} (join plaintext)
    // Step 2: calculate intermediate values
    intermediates = [(A, R)] # [wrapRound key s j | s <- intermediates
                                                  | j <- [0..5]]
    // Step 3: Prepare outputs
    (A', R') = intermediates ! 0
    C = [A'] # R'

// Unwrap `ciphertext` using `key` as the key encryption key.  `iv` is the
// expected initial value.  This function implements the algorithm from Section
// 2.2.2 using the index-based definition.  It also checks the key data
// integrity using `iv` (Section 2.2.3).  This function returns a tuple where
// the first element indicates  whether or not the integrity check passed
// (`True` indicates the check passed), and the second element is the decrypted
// plain text.  If the integrity check fails, the second element will be all
// zeros.
aesUnwrapKey : {n} (fin n, n >= 24, n % 8 == 0, width (n / 8) <= 64) =>
               [AESKeySize] -> [8][8] -> [n][8] -> (Bit, [n-8][8])
aesUnwrapKey key iv ciphertext = if (join iv) == A'
                                 then (True, split (join R'))
                                 else (False, zero)
  where
    (A', R') = aesUnwrapKeyUnchecked key ciphertext

// This function performs steps 1 and 2 of the unwrap key algorithm from
// Section 2.2.2 using the index-based definition.
aesUnwrapKeyUnchecked : {n} (fin n, n >= 24, n % 8 == 0, width (n / 8) <= 64) =>
                        [AESKeySize] -> [n][8] -> ([64], [n/8 - 1][64])
aesUnwrapKeyUnchecked key ciphertext = intermediates ! 0
  where
    // Step 1: Initialize variables
    A = join (take`{8} ciphertext)
    R = split`{parts=(n-8)/8, each=64} (join (drop`{8} ciphertext))
    // Step 2: Compute intermediate values
    intermediates = [(A, R)] # [unwrapRound key s j | s <- intermediates
                                                    | j <- [5, 4 .. 0]]

private
  /////////////////////////////////////////////////////////////////////////////
  //// Helper functions
  /////////////////////////////////////////////////////////////////////////////

  /*
   * This section contains helper functions for wrapping and unwrapping keys.
   * These functions make use of the notation defined in Section 2.1 of
   * RFC 3394.
   */

  // Body of inner loop of step 2 of key wrap algorithm (Section 2.2.1)
  wrapBlock : {n} (fin n, width n <= 64) =>
              [AESKeySize] -> ([64], [n][64]) -> [64] -> [64] -> ([64], [n][64])
  wrapBlock key (A, R) j i = (A', R')
    where B  = AES::encrypt key (A # (R @ (i-1)))
          A' = (take`{64} B) ^ (((`n : [64]) * j) + i)
          R' = update R (i-1) (drop`{64} B)

  // Body of inner loop of step 2 of key unwrap algorithm (Section 2.2.2)
  unwrapBlock : {n} (fin n, width n <= 64) =>
                [AESKeySize] -> ([64], [n][64]) -> [64] -> [64] -> ([64], [n][64])
  unwrapBlock key (A, R) j i = (A', R')
    where B  = AES::decrypt key ((A ^ (((`n : [64]) * j) + i)) # (R @ (i-1)))
          A' = take`{64} B
          R' = update R (i-1) (drop`{64} B)

  // A single round of the key wrap algorithm (Section 2.2.1, step 2)
  wrapRound : {n} (fin n, n >= 1, width n <= 64) =>
              [AESKeySize] -> ([64], [n][64]) -> [64] -> ([64], [n][64])
  wrapRound key (A, R) j = wrappedBlocks ! 0
    where wrappedBlocks = [(A, R)] # [wrapBlock key s j i | s <- wrappedBlocks
                                                          | i <- [1..n]]

  // A single round of the key unwrap algorithm (Section 2.2.2, step 2)
  unwrapRound : {n} (fin n, n >= 1, width n <= 64) =>
                [AESKeySize] -> ([64], [n][64]) -> [64] -> ([64], [n][64])
  unwrapRound key (A, R) j = unwrappedBlocks ! 0
    where unwrappedBlocks = [(A, R)] # [unwrapBlock key s j i | s <- unwrappedBlocks
                                                              | i <- [n, n-1 .. 1]]
