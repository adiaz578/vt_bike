/**
 * Implementation of the finite field GF(2^8).
 *
 * @copyright Galois, Inc
 * @author Nichole Schimanski <nls@galois.com>
 * @author Alannah Carr
 * @author Marcella Hastings <marcella@galois.com>
 *
 * This implementation is drawn from the description of the Galois Field
 * GF(2^8) in [FIPS-197u1], Section 4.
 *
 * References
 * [FIPS-197u1]: Morris J. Dworkin, Elaine B. Barker, James R. Nechvatal,
 * James Foti, Lawrence E. Bassham, E. Roback, and James F. Dray Jr.
 * Advanced Encryption Standard (AES). Federal Inf. Process. Stds. (NIST FIPS)
 * 197, update 1. May 2023.
 */
module Common::GF28 where

/**
 * The GF28 type represents a byte, where each bit is the coefficient of a
 * polynomial. [FIPS-197u1] Section 4, Algorithm 4.1.
 *
 * Both the spec and this implementation represent GF28 elements in big-endian
 * format.
 */
type GF28 = [8]

/**
 * Add a set of `n` elements in GF28. [FIPS-197u1] Section 4.1.
 *
 * Addition is computed by pairwise adding the coefficients modulo 2.
 */
add : {n} (fin n) => [n]GF28 -> GF28
add ps = foldl (^) zero ps

/**
 * The irreducable polynomial used in multiplication.
 * [FIPS-197u1] Section 4.2, Algorithm 4.3
 */
irreducible = <| x^^8 + x^^4 + x^^3 + x + 1 |>

/**
 * Multiply two elements in GF28. [FIPS-197u1] Section 4.2.
 */
mult : GF28 -> GF28 -> GF28
mult x y = pmod (pmult x y) irreducible

/** A GF28 value to a scalar power */
pow : GF28 -> [8] -> GF28
pow n k = vals ! 0 where
    sq x = mult x x
    vals = [1] # [ if i then mult n (sq acc) else sq acc
        | acc <- vals
        | i   <- k]

/** Dot product of two vectors */
dotProduct : {n} (fin n) => [n]GF28 -> [n]GF28 -> GF28
dotProduct xs ys = add [ mult x y | x <- xs | y <- ys ]

/** Multiply a matrix by a vector */
vectorMult : {n, m} (fin n) => [n]GF28 -> [m][n]GF28 -> [m]GF28
vectorMult v ms = [ dotProduct v m | m <- ms ]

/**
 * Multiply two matrices. [FIPS-197u1] Section 4.3
 */
matrixMult : {n, m, k} (fin m) => [n][m]GF28 -> [m][k]GF28 -> [n][k]GF28
matrixMult xss yss = [ vectorMult xs yss' | xs <- xss ]
    where yss' = transpose yss

/**
 * [FIPS-197u1] Section 4.4, Algorithm 4.10
 * ```repl
 * :prove inverseDefined
 * ```
 */
property inverseDefined x =
    if x == 0 then inverse x == 0
    else mult x (inverse x) == 1

/**
 * Compute the inverse of a value. [FIPS-197u1 Section 4.4, Algorithm 4.11
 *
 * Mathematically speaking, the inverse isnt' defined for `x = 0`, but
 * we take the same liberties as the reference and use a method that
 * returns 0 for the inverse of 0. This is useful for computing Algorithm
 * 5.2 later.
 */
inverse : GF28 -> GF28
inverse x = pow x 254

/**
 * Correctness property for inverses.
 * ```repl
 * :prove inverseCorrect
 * ```
 */
property inverseCorrect x = inverse (inverse x) == x
