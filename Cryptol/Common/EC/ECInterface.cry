/*
Interface for a generic elliptic curve.

This is designed to be used in any algorithm that depends on elliptic curves.
It's supposed to be generic over the type of curve; the design tries not to
tie the user into anything specific with respect to the curve construction or
curve field.

There is no single specification that defines elliptic curves in its entirety;
here we provide a few resources to use as a starting point to learn more about
curves and their uses in cryptography:
Nick Sullivan. A (Relatively Easy to Understand) Primer on Elliptic Curve
    Cryptography. October 2013.
    @see https://blog.cloudflare.com/a-relatively-easy-to-understand-primer-on-elliptic-curve-cryptography
Joseph H. Silverman. An Introduction to the Theory of Elliptic Curves.
    June 2006.
    @see https://www.math.brown.edu/johsilve/Presentations/WyomingEllipticCurve.pdf
Dan Boneh. "Pairings in Cryptography" lecture. July 2015.
    @see https://www.youtube.com/watch?v=8WDOpzxpnTE
Ian Blake, Gadiel Seroussi, and Nigel Smart. Elliptic Curves in
    Cryptography. United Kingdom, Cambridge University Press, 1999.
    @see https://www.google.com/books/edition/Elliptic_Curves_in_Cryptography/0_vegzgyqGMC

[SP-800-186]: Lily Chen, Dustin Moody, Karen Randall, Andrew Regenscheid,
   Angela Robinson. Recommendations for Discrete Logarithm-based Cryptography:
   Elliptic Curve Domain Parameters. (National Institute of Standards and
   Technology, Gaithersburg, MD), NIST Special Publication (SP) NIST SP
   800-186. February 2023.
   @see https://doi.org/10.6028/NIST.SP.800-186

@copyright Galois, Inc.
@author Marcella Hastings <marcella@galois.com>
*/
interface module Common::EC::ECInterface where
    /**
     * Representation of a point on the curve.
     *
     * This should be able to represent both concrete points (with an x and y
     * coordinate) and the point at infinity.
     */
    type Point : *

    /**
     * Order of the base point `G` for the curve.
     */
    type n : #
    type constraint (fin n, prime n, n >= 1)

    /**
     * Modulus of the field over which the curve is defined.
     *
     * The curve must be defined over a Galois fields `GF(q)` for some `q`
     * (typically an odd prime or 2^m).
     */
    type q : #
    type constraint (fin q, q >= 1)

    /**
     * Cofactor for the elliptic curve.
     *
     * The order of the curve is defined as `h * n`, where `h` is small
     * and `n`, the order of the base point `G`, is prime. If `h` is not
     * 1, then the base point does not generate the entire curve.
     */
    h : Integer

    /**
     * Base point for the curve.
     */
    G : Point

    /**
     * Indicate whether a point is the point at infinity (also known as the
     * identity).
     */
    isInfinity : Point -> Bool

    /**
     * Indicate whether a point is valid: either the point at infinity or
     * another point on the curve.
     *
     * This should check the following:
     * - The coordinates of the `Point` are correctly formed
     * - The point is either on the curve (e.g. satisfies the curve equation)
     *   OR is the point at infinity.
     */
    isValid : Point -> Bool

    /**
     * Indicate whether two points are the same.
     */
    pointEq : Point -> Point -> Bool

    /**
     * Addition of two points.
     */
    add : Point -> Point -> Point

    /**
     * Subtraction of two points.
     */
    sub : Point -> Point -> Point

    /**
     * Doubling of a point (typically, elliptic curves offer optimized
     * routines for doubling a point compared to adding it to itself).
     */
    double : Point -> Point

    /**
     * Scalar multiplication of a point by an integer.
     */
    scmul : Integer -> Point -> Point

    /**
     * Twin multiplication of two points. This is the operation
     * [c]P + [d]Q, which sometimes has an optimized routine
     * compared to doing the scalar multiplications separately.
     */
    twin_mul : Integer -> Point -> Integer -> Point -> Point

    /**
     * Extract the x-coordinate of the affine representation of a `Point`,
     * or `None` if it's the point at infinity.
     */
    xCoord: Point -> Option (Z q)
