#!/usr/bin/env python3

import numpy as np
import math
import os

# Output Files
if os.path.exists("message.txt"):
	os.remove("message.txt")
if os.path.exists("error.txt"):
	os.remove("error.txt")

R_BITS = 10163
BLOCK_SIZE = 32
T1 = 134

BLOCKS = np.ceil(R_BITS/BLOCK_SIZE).astype(int)


# ===========================================================
#
# MESSAGE 
#
# ===========================================================
m=0xadded 8 extra bits

blocks_out = np.zeros(BLOCKS).astype(int)

for b in range(0, BLOCKS):
  current_block = (m >> (10176-(b+1)*BLOCK_SIZE)) & 0xFFFFFFFF
  current_block_flipped = int('{:032b}'.format(current_block, width=32)[::-1], 2)
  blocks_out[b] = current_block_flipped
  #print(hex(blocks_out[b]).split('x')[-1].zfill(8))

with open('message.txt', 'a') as f:
  for item in blocks_out:
    item_hex = hex(item).split('x')[-1].zfill(8)
    f.write("%s%s%s%s%s%s%s%s\n" % (item_hex[0], item_hex[1], item_hex[2], item_hex[3], item_hex[4], item_hex[5], item_hex[6], item_hex[7]))
f.close()



# ===========================================================
#
# ERROR 
#
# ===========================================================


e0= 0x

e1= 0x

n=0
blocks_out_e = np.zeros(T1).astype(int)
intermediate = 0

for b in range(0, BLOCKS):
  current_block = (e0 >> (10208-(b+1)*BLOCK_SIZE)) & 0xFFFFFFFF
  temp = (intermediate << 19) + (current_block >> 13)
  intermediate = current_block & (2**13-1)
  current_block = temp
  if current_block != 0:
    address = BLOCKS-1-b
    
    for i in range(0, 32):
      if (current_block & (1 << i)) != 0:
        bit = np.log((1 << i))/np.log(2)
        rand_out = (address << 5) + bit.astype(int)
        #print("BIT POSITION: ", n)
        #print(address)
        #print(bit)
        #print(rand_out.astype(int))
        blocks_out_e[n] = rand_out
        n = n + 1

intermediate = 0
for b in range(0, BLOCKS):
  current_block = (e1 >> (10208-(b+1)*BLOCK_SIZE)) & 0xFFFFFFFF
  temp = (intermediate << 19) + (current_block >> 13)
  intermediate = current_block & (2**13-1)
  current_block = temp
  if current_block != 0:
    address = BLOCKS-1-b
    
    for i in range(0, 32):
      if (current_block & (1 << i)) != 0:
        bit = np.log((1 << i))/np.log(2)
        rand_out = (1 << 14) + (address << 5) + bit.astype(int)
        #print("BIT POSITION: ", n)
        #print(address)
        #print(bit)
        #print(rand_out.astype(int))
        blocks_out_e[n] = rand_out
        n = n + 1  
  

with open('error.txt', 'a') as f:
  for item in blocks_out_e:
    item_bin = bin(item).split('b')[-1].zfill(15)
    for i in range(0,15):
      f.write("%s" % item_bin[i])
    f.write("\n")
f.close()


pk0 = 0x

pk1 = 0x

# pk0
n = 0
blocks_out_pk0 = np.zeros(318).astype(int)
intermediate = 0
line = '",';

for b in range(0, BLOCKS):
  current_block = (pk0 >> (10176-(b+1)*BLOCK_SIZE)) & 0xFFFFFFFF
  temp = (intermediate << 19) + (current_block >> 13)
  #print(hex(current_block).split('x')[-1].zfill(32))
  intermediate = current_block & (2**13-1)
  current_block = temp
  blocks_out_pk0[b] = current_block
  #current_block_hex = hex(current_block).split('x')[-1].zfill(32)
  #print(current_block_hex)
  

for b in range(0, BLOCKS):
  current_block = blocks_out_pk0[BLOCKS-1-b]
  current_block_hex = hex(current_block).split('x')[-1].zfill(8)
  if np.mod(b+1, 8) == 0:
    line = 'INIT_' + hex(np.floor(b/8).astype(int)).split('x')[-1].zfill(2) + ' => X"' + current_block_hex + line
    print(line)
    line = '",'
  else:
    line = current_block_hex + line
  
print(line)



# pk1
n = 0
blocks_out_pk1 = np.zeros(318).astype(int)
intermediate = 0
line = '",';

for b in range(0, BLOCKS):
  current_block = (pk1 >> (10176-(b+1)*BLOCK_SIZE)) & 0xFFFFFFFF
  temp = (intermediate << 19) + (current_block >> 13)
  #print(hex(current_block).split('x')[-1].zfill(32))
  intermediate = current_block & (2**13-1)
  current_block = temp
  blocks_out_pk1[b] = current_block
  #current_block_hex = hex(current_block).split('x')[-1].zfill(32)
  #print(current_block_hex)
  

for b in range(0, BLOCKS):
  current_block = blocks_out_pk1[BLOCKS-1-b]
  current_block_hex = hex(current_block).split('x')[-1].zfill(8)
  if np.mod(b+1, 8) == 0:
    line = 'INIT_' + hex(np.floor(b/8).astype(int)+64).split('x')[-1].zfill(2) + ' => X"' + current_block_hex + line
    print(line)
    line = '",'
  else:
    line = current_block_hex + line
  
print(line)




print("----------------------------------------------------------------")
print("Cryptogram:")


c0 = 0x


# ct0
n = 0
blocks_out_ct0 = np.zeros(318).astype(int)
intermediate = 0
line = '",';

for b in range(0, BLOCKS):
  current_block = (c0 >> (10176-(b+1)*BLOCK_SIZE)) & 0xFFFFFFFF
  temp = (intermediate << 19) + (current_block >> 13)
  #print(hex(current_block).split('x')[-1].zfill(32))
  intermediate = current_block & (2**13-1)
  current_block = temp
  blocks_out_pk0[b] = current_block
  current_block_hex = hex(current_block).split('x')[-1].zfill(8)
  print(current_block_hex)
