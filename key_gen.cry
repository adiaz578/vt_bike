
/* 
    BIKE3-CCA with Level 1 security: 
    n = 24538
    r = 12269
    w = 134
    t = 154 
*/

/*
    Notations:
    R: The cyclic polynomial ring F2[X]/hXr − 1i.
    |v|: The Hamming weight of a binary polynomial v.
    u$←U: Variable u is sampled uniformly at random from set U
*/


// Security Level
lamda = 1  

// KeyGen
// - Input: λ, the target quantum security level.
// - Output: the private key (h0, h1, σ0, σ1) and the public key (f0, f1).
keyGen : Integer -> Integer //the output is supposed to be two lists of polynomials

// 0. Given λ, set the parameters r, w as described above.
r = if lamda == 1 then 12269 else 0
w = if lamda == 1 then 134 else 0

// 1. Generate h0, h1
// (h0, h1)$← R both of (odd) weight |h0| = |h1| = w/2.

// 2. Generate σ0, σ1
// $← R uniformly at random.
// 3. Generate g
// $← R of odd weight (so |g| ≈ r/2).
// 4. Compute (f0, f1) ← (h1 + gh0, g).



/*
    GenPseudoRandOddWeight Implementation
    Algorithm 7 GenPseudoRandOddWeight(seed, len)
    Require: seed (32 bytes), len
    Ensure: ¯z (len pseudorandom bits z of odd weight, in a byte array).
    1: z = GenPseudoRand(seed, len)
    2: if weight(z) is even then z[0] = z[0] ⊕1
    3: return ¯z
*/
